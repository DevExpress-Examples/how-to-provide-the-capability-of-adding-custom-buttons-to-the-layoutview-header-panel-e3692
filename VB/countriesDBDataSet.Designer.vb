'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5448
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning disable 1591


Imports Microsoft.VisualBasic
Imports System
Namespace CustomButtonsLayoutView


	''' <summary>
	'''Represents a strongly typed in-memory cache of data.
	'''</summary>
	<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.Serializable(), Global.System.ComponentModel.DesignerCategoryAttribute("code"), Global.System.ComponentModel.ToolboxItem(True), Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), Global.System.Xml.Serialization.XmlRootAttribute("countriesDBDataSet"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")> _
	Partial Public Class countriesDBDataSet
		Inherits System.Data.DataSet

		Private tableCountries As CountriesDataTable

		Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Public Sub New()
			Me.BeginInit()
			Me.InitClass()
			Dim schemaChangedHandler As New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
			AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
			Me.EndInit()
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
			MyBase.New(info, context, False)
			If (Me.IsBinarySerialized(info, context) = True) Then
				Me.InitVars(False)
				Dim schemaChangedHandler1 As New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
				AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
				AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
				Return
			End If
			Dim strSchema As String = (CStr(info.GetValue("XmlSchema", GetType(String))))
			If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
				Dim ds As New Global.System.Data.DataSet()
				ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
				If (ds.Tables("Countries") IsNot Nothing) Then
					MyBase.Tables.Add(New CountriesDataTable(ds.Tables("Countries")))
				End If
				Me.DataSetName = ds.DataSetName
				Me.Prefix = ds.Prefix
				Me.Namespace = ds.Namespace
				Me.Locale = ds.Locale
				Me.CaseSensitive = ds.CaseSensitive
				Me.EnforceConstraints = ds.EnforceConstraints
				Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
				Me.InitVars()
			Else
				Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
			End If
			Me.GetSerializationData(info, context)
			Dim schemaChangedHandler As New Global.System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
			AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
			AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False), Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
		Public ReadOnly Property Countries() As CountriesDataTable
			Get
				Return Me.tableCountries
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.BrowsableAttribute(True), Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)> _
		Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
			Get
				Return Me._schemaSerializationMode
			End Get
			Set(ByVal value As System.Data.SchemaSerializationMode)
				Me._schemaSerializationMode = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
		Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
			Get
				Return MyBase.Tables
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
		Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
			Get
				Return MyBase.Relations
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Overrides Sub InitializeDerivedDataSet()
			Me.BeginInit()
			Me.InitClass()
			Me.EndInit()
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Public Overrides Function Clone() As Global.System.Data.DataSet
			Dim cln As countriesDBDataSet = (CType(MyBase.Clone(), countriesDBDataSet))
			cln.InitVars()
			cln.SchemaSerializationMode = Me.SchemaSerializationMode
			Return cln
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Overrides Function ShouldSerializeTables() As Boolean
			Return False
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Overrides Function ShouldSerializeRelations() As Boolean
			Return False
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
			If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
				Me.Reset()
				Dim ds As New Global.System.Data.DataSet()
				ds.ReadXml(reader)
				If (ds.Tables("Countries") IsNot Nothing) Then
					MyBase.Tables.Add(New CountriesDataTable(ds.Tables("Countries")))
				End If
				Me.DataSetName = ds.DataSetName
				Me.Prefix = ds.Prefix
				Me.Namespace = ds.Namespace
				Me.Locale = ds.Locale
				Me.CaseSensitive = ds.CaseSensitive
				Me.EnforceConstraints = ds.EnforceConstraints
				Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
				Me.InitVars()
			Else
				Me.ReadXml(reader)
				Me.InitVars()
			End If
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
			Dim stream As New Global.System.IO.MemoryStream()
			Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
			stream.Position = 0
			Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Friend Sub InitVars()
			Me.InitVars(True)
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Friend Sub InitVars(ByVal initTable As Boolean)
			Me.tableCountries = (CType(MyBase.Tables("Countries"), CountriesDataTable))
			If (initTable = True) Then
				If (Me.tableCountries IsNot Nothing) Then
					Me.tableCountries.InitVars()
				End If
			End If
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Sub InitClass()
			Me.DataSetName = "countriesDBDataSet"
			Me.Prefix = ""
			Me.Namespace = "http://tempuri.org/countriesDBDataSet.xsd"
			Me.EnforceConstraints = True
			Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
			Me.tableCountries = New CountriesDataTable()
			MyBase.Tables.Add(Me.tableCountries)
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Function ShouldSerializeCountries() As Boolean
			Return False
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
			If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
				Me.InitVars()
			End If
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
			Dim ds As New countriesDBDataSet()
			Dim type As New Global.System.Xml.Schema.XmlSchemaComplexType()
			Dim sequence As New Global.System.Xml.Schema.XmlSchemaSequence()
			Dim any As New Global.System.Xml.Schema.XmlSchemaAny()
			any.Namespace = ds.Namespace
			sequence.Items.Add(any)
			type.Particle = sequence
			Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
			If xs.Contains(dsSchema.TargetNamespace) Then
				Dim s1 As New Global.System.IO.MemoryStream()
				Dim s2 As New Global.System.IO.MemoryStream()
				Try
					Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
					dsSchema.Write(s1)
					Dim schemas As System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
					Do While schemas.MoveNext()
						schema = (CType(schemas.Current, Global.System.Xml.Schema.XmlSchema))
						s2.SetLength(0)
						schema.Write(s2)
						If (s1.Length = s2.Length) Then
							s1.Position = 0
							s2.Position = 0
							Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

							Loop
							If (s1.Position = s1.Length) Then
								Return type
							End If
						End If
					Loop
				Finally
					If (s1 IsNot Nothing) Then
						s1.Close()
					End If
					If (s2 IsNot Nothing) Then
						s2.Close()
					End If
				End Try
			End If
			xs.Add(dsSchema)
			Return type
		End Function

		Public Delegate Sub CountriesRowChangeEventHandler(ByVal sender As Object, ByVal e As CountriesRowChangeEvent)

		''' <summary>
		'''Represents the strongly named DataTable class.
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.Serializable(), Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
		Partial Public Class CountriesDataTable
			Inherits System.Data.TypedTableBase(Of CountriesRow)

			Private columnId As Global.System.Data.DataColumn

			Private columnCountry As Global.System.Data.DataColumn

			Private columnOfficialName As Global.System.Data.DataColumn

			Private columnCurrency As Global.System.Data.DataColumn

			Private columnCapital As Global.System.Data.DataColumn

			Private columnBFlag As Global.System.Data.DataColumn

			Private columnArea As Global.System.Data.DataColumn

			Private columnGDP As Global.System.Data.DataColumn

			Private columnPopulation As Global.System.Data.DataColumn

			Private columnLanguages As Global.System.Data.DataColumn

			Private columnReligions As Global.System.Data.DataColumn

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub New()
				Me.TableName = "Countries"
				Me.BeginInit()
				Me.InitClass()
				Me.EndInit()
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Friend Sub New(ByVal table As Global.System.Data.DataTable)
				Me.TableName = table.TableName
				If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
					Me.CaseSensitive = table.CaseSensitive
				End If
				If (table.Locale.ToString() <> table.DataSet.Locale.ToString()) Then
					Me.Locale = table.Locale
				End If
				If (table.Namespace <> table.DataSet.Namespace) Then
					Me.Namespace = table.Namespace
				End If
				Me.Prefix = table.Prefix
				Me.MinimumCapacity = table.MinimumCapacity
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
				MyBase.New(info, context)
				Me.InitVars()
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property IdColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnId
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property CountryColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnCountry
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property OfficialNameColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnOfficialName
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property CurrencyColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnCurrency
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property CapitalColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnCapital
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property BFlagColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnBFlag
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property AreaColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnArea
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property GDPColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnGDP
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property PopulationColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnPopulation
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property LanguagesColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnLanguages
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property ReligionsColumn() As Global.System.Data.DataColumn
				Get
					Return Me.columnReligions
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False)> _
			Public ReadOnly Property Count() As Integer
				Get
					Return Me.Rows.Count
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Default Public ReadOnly Property Item(ByVal index As Integer) As CountriesRow
				Get
					Return (CType(Me.Rows(index), CountriesRow))
				End Get
			End Property

			Public Event CountriesRowChanging As CountriesRowChangeEventHandler

			Public Event CountriesRowChanged As CountriesRowChangeEventHandler

			Public Event CountriesRowDeleting As CountriesRowChangeEventHandler

			Public Event CountriesRowDeleted As CountriesRowChangeEventHandler

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub AddCountriesRow(ByVal row As CountriesRow)
				Me.Rows.Add(row)
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function AddCountriesRow(ByVal Id As Integer, ByVal Country As String, ByVal OfficialName As String, ByVal Currency As String, ByVal Capital As String, ByVal BFlag() As Byte, ByVal Area As Single, ByVal GDP As Decimal, ByVal Population As Integer, ByVal Languages As String, ByVal Religions As String) As CountriesRow
				Dim rowCountriesRow As CountriesRow = (CType(Me.NewRow(), CountriesRow))
				Dim columnValuesArray() As Object = { Id, Country, OfficialName, Currency, Capital, BFlag, Area, GDP, Population, Languages, Religions}
				rowCountriesRow.ItemArray = columnValuesArray
				Me.Rows.Add(rowCountriesRow)
				Return rowCountriesRow
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function FindById(ByVal Id As Integer) As CountriesRow
				Return (CType(Me.Rows.Find(New Object() { Id}), CountriesRow))
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Overrides Function Clone() As Global.System.Data.DataTable
				Dim cln As CountriesDataTable = (CType(MyBase.Clone(), CountriesDataTable))
				cln.InitVars()
				Return cln
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
				Return New CountriesDataTable()
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Friend Sub InitVars()
				Me.columnId = MyBase.Columns("Id")
				Me.columnCountry = MyBase.Columns("Country")
				Me.columnOfficialName = MyBase.Columns("OfficialName")
				Me.columnCurrency = MyBase.Columns("Currency")
				Me.columnCapital = MyBase.Columns("Capital")
				Me.columnBFlag = MyBase.Columns("BFlag")
				Me.columnArea = MyBase.Columns("Area")
				Me.columnGDP = MyBase.Columns("GDP")
				Me.columnPopulation = MyBase.Columns("Population")
				Me.columnLanguages = MyBase.Columns("Languages")
				Me.columnReligions = MyBase.Columns("Religions")
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Private Sub InitClass()
				Me.columnId = New Global.System.Data.DataColumn("Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnId)
				Me.columnCountry = New Global.System.Data.DataColumn("Country", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCountry)
				Me.columnOfficialName = New Global.System.Data.DataColumn("OfficialName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnOfficialName)
				Me.columnCurrency = New Global.System.Data.DataColumn("Currency", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCurrency)
				Me.columnCapital = New Global.System.Data.DataColumn("Capital", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnCapital)
				Me.columnBFlag = New Global.System.Data.DataColumn("BFlag", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnBFlag)
				Me.columnArea = New Global.System.Data.DataColumn("Area", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnArea)
				Me.columnGDP = New Global.System.Data.DataColumn("GDP", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnGDP)
				Me.columnPopulation = New Global.System.Data.DataColumn("Population", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnPopulation)
				Me.columnLanguages = New Global.System.Data.DataColumn("Languages", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnLanguages)
				Me.columnReligions = New Global.System.Data.DataColumn("Religions", GetType(String), Nothing, Global.System.Data.MappingType.Element)
				MyBase.Columns.Add(Me.columnReligions)
				Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() { Me.columnId}, True))
				Me.columnId.AllowDBNull = False
				Me.columnId.Unique = True
				Me.columnCountry.MaxLength = 50
				Me.columnOfficialName.MaxLength = 255
				Me.columnCurrency.MaxLength = 255
				Me.columnCapital.MaxLength = 50
				Me.columnLanguages.MaxLength = 50
				Me.columnReligions.MaxLength = 255
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function NewCountriesRow() As CountriesRow
				Return (CType(Me.NewRow(), CountriesRow))
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
				Return New CountriesRow(builder)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Function GetRowType() As Global.System.Type
				Return GetType(CountriesRow)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanged(e)
				If (Me.CountriesRowChangedEvent IsNot Nothing) Then
					RaiseEvent CountriesRowChanged(Me, New CountriesRowChangeEvent((CType(e.Row, CountriesRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowChanging(e)
				If (Me.CountriesRowChangingEvent IsNot Nothing) Then
					RaiseEvent CountriesRowChanging(Me, New CountriesRowChangeEvent((CType(e.Row, CountriesRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleted(e)
				If (Me.CountriesRowDeletedEvent IsNot Nothing) Then
					RaiseEvent CountriesRowDeleted(Me, New CountriesRowChangeEvent((CType(e.Row, CountriesRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
				MyBase.OnRowDeleting(e)
				If (Me.CountriesRowDeletingEvent IsNot Nothing) Then
					RaiseEvent CountriesRowDeleting(Me, New CountriesRowChangeEvent((CType(e.Row, CountriesRow)), e.Action))
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub RemoveCountriesRow(ByVal row As CountriesRow)
				Me.Rows.Remove(row)
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
				Dim type As New Global.System.Xml.Schema.XmlSchemaComplexType()
				Dim sequence As New Global.System.Xml.Schema.XmlSchemaSequence()
				Dim ds As New countriesDBDataSet()
				Dim any1 As New Global.System.Xml.Schema.XmlSchemaAny()
				any1.Namespace = "http://www.w3.org/2001/XMLSchema"
				any1.MinOccurs = New Decimal(0)
				any1.MaxOccurs = Decimal.MaxValue
				any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any1)
				Dim any2 As New Global.System.Xml.Schema.XmlSchemaAny()
				any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
				any2.MinOccurs = New Decimal(1)
				any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
				sequence.Items.Add(any2)
				Dim attribute1 As New Global.System.Xml.Schema.XmlSchemaAttribute()
				attribute1.Name = "namespace"
				attribute1.FixedValue = ds.Namespace
				type.Attributes.Add(attribute1)
				Dim attribute2 As New Global.System.Xml.Schema.XmlSchemaAttribute()
				attribute2.Name = "tableTypeName"
				attribute2.FixedValue = "CountriesDataTable"
				type.Attributes.Add(attribute2)
				type.Particle = sequence
				Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable()
				If xs.Contains(dsSchema.TargetNamespace) Then
					Dim s1 As New Global.System.IO.MemoryStream()
					Dim s2 As New Global.System.IO.MemoryStream()
					Try
						Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
						dsSchema.Write(s1)
						Dim schemas As System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator()
						Do While schemas.MoveNext()
							schema = (CType(schemas.Current, Global.System.Xml.Schema.XmlSchema))
							s2.SetLength(0)
							schema.Write(s2)
							If (s1.Length = s2.Length) Then
								s1.Position = 0
								s2.Position = 0
								Do While ((s1.Position <> s1.Length) AndAlso (s1.ReadByte() = s2.ReadByte()))

								Loop
								If (s1.Position = s1.Length) Then
									Return type
								End If
							End If
						Loop
					Finally
						If (s1 IsNot Nothing) Then
							s1.Close()
						End If
						If (s2 IsNot Nothing) Then
							s2.Close()
						End If
					End Try
				End If
				xs.Add(dsSchema)
				Return type
			End Function
		End Class

		''' <summary>
		'''Represents strongly named DataRow class.
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
		Partial Public Class CountriesRow
			Inherits System.Data.DataRow

			Private tableCountries As CountriesDataTable

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
				MyBase.New(rb)
				Me.tableCountries = (CType(Me.Table, CountriesDataTable))
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Id() As Integer
				Get
					Return (CInt(Fix(Me(Me.tableCountries.IdColumn))))
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableCountries.IdColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Country() As String
				Get
					Try
						Return (CStr(Me(Me.tableCountries.CountryColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Country' in table 'Countries' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCountries.CountryColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property OfficialName() As String
				Get
					Try
						Return (CStr(Me(Me.tableCountries.OfficialNameColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'OfficialName' in table 'Countries' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCountries.OfficialNameColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Currency() As String
				Get
					Try
						Return (CStr(Me(Me.tableCountries.CurrencyColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Currency' in table 'Countries' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCountries.CurrencyColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Capital() As String
				Get
					Try
						Return (CStr(Me(Me.tableCountries.CapitalColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Capital' in table 'Countries' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCountries.CapitalColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property BFlag() As Byte()
				Get
					Try
						Return (CType(Me(Me.tableCountries.BFlagColumn), Byte()))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'BFlag' in table 'Countries' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Byte())
					Me(Me.tableCountries.BFlagColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Area() As Single
				Get
					Try
						Return (CSng(Me(Me.tableCountries.AreaColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Area' in table 'Countries' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Single)
					Me(Me.tableCountries.AreaColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property GDP() As Decimal
				Get
					Try
						Return (CDec(Me(Me.tableCountries.GDPColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'GDP' in table 'Countries' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Decimal)
					Me(Me.tableCountries.GDPColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Population() As Integer
				Get
					Try
						Return (CInt(Fix(Me(Me.tableCountries.PopulationColumn))))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Population' in table 'Countries' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As Integer)
					Me(Me.tableCountries.PopulationColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Languages() As String
				Get
					Try
						Return (CStr(Me(Me.tableCountries.LanguagesColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Languages' in table 'Countries' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCountries.LanguagesColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Property Religions() As String
				Get
					Try
						Return (CStr(Me(Me.tableCountries.ReligionsColumn)))
					Catch e As Global.System.InvalidCastException
						Throw New Global.System.Data.StrongTypingException("The value for column 'Religions' in table 'Countries' is DBNull.", e)
					End Try
				End Get
				Set(ByVal value As String)
					Me(Me.tableCountries.ReligionsColumn) = value
				End Set
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsCountryNull() As Boolean
				Return Me.IsNull(Me.tableCountries.CountryColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetCountryNull()
				Me(Me.tableCountries.CountryColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsOfficialNameNull() As Boolean
				Return Me.IsNull(Me.tableCountries.OfficialNameColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetOfficialNameNull()
				Me(Me.tableCountries.OfficialNameColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsCurrencyNull() As Boolean
				Return Me.IsNull(Me.tableCountries.CurrencyColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetCurrencyNull()
				Me(Me.tableCountries.CurrencyColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsCapitalNull() As Boolean
				Return Me.IsNull(Me.tableCountries.CapitalColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetCapitalNull()
				Me(Me.tableCountries.CapitalColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsBFlagNull() As Boolean
				Return Me.IsNull(Me.tableCountries.BFlagColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetBFlagNull()
				Me(Me.tableCountries.BFlagColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsAreaNull() As Boolean
				Return Me.IsNull(Me.tableCountries.AreaColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetAreaNull()
				Me(Me.tableCountries.AreaColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsGDPNull() As Boolean
				Return Me.IsNull(Me.tableCountries.GDPColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetGDPNull()
				Me(Me.tableCountries.GDPColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsPopulationNull() As Boolean
				Return Me.IsNull(Me.tableCountries.PopulationColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetPopulationNull()
				Me(Me.tableCountries.PopulationColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsLanguagesNull() As Boolean
				Return Me.IsNull(Me.tableCountries.LanguagesColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetLanguagesNull()
				Me(Me.tableCountries.LanguagesColumn) = Global.System.Convert.DBNull
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Function IsReligionsNull() As Boolean
				Return Me.IsNull(Me.tableCountries.ReligionsColumn)
			End Function

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub SetReligionsNull()
				Me(Me.tableCountries.ReligionsColumn) = Global.System.Convert.DBNull
			End Sub
		End Class

		''' <summary>
		'''Row event argument class
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
		Public Class CountriesRowChangeEvent
			Inherits System.EventArgs

			Private eventRow As CountriesRow

			Private eventAction As Global.System.Data.DataRowAction

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public Sub New(ByVal row As CountriesRow, ByVal action As Global.System.Data.DataRowAction)
				Me.eventRow = row
				Me.eventAction = action
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property Row() As CountriesRow
				Get
					Return Me.eventRow
				End Get
			End Property

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Public ReadOnly Property Action() As Global.System.Data.DataRowAction
				Get
					Return Me.eventAction
				End Get
			End Property
		End Class
	End Class
End Namespace
Namespace CustomButtonsLayoutView.countriesDBDataSetTableAdapters


	''' <summary>
	'''Represents the connection and commands used to retrieve and save data.
	'''</summary>
	<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.ComponentModel.DesignerCategoryAttribute("code"), Global.System.ComponentModel.ToolboxItem(True), Global.System.ComponentModel.DataObjectAttribute(True), Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
	Partial Public Class CountriesTableAdapter
		Inherits System.ComponentModel.Component

		Private _adapter As Global.System.Data.OleDb.OleDbDataAdapter

		Private _connection As Global.System.Data.OleDb.OleDbConnection

		Private _transaction As Global.System.Data.OleDb.OleDbTransaction

		Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand

		Private _clearBeforeFill As Boolean

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Public Sub New()
			Me.ClearBeforeFill = True
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
			Get
				If (Me._adapter Is Nothing) Then
					Me.InitAdapter()
				End If
				Return Me._adapter
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
			Get
				If (Me._connection Is Nothing) Then
					Me.InitConnection()
				End If
				Return Me._connection
			End Get
			Set(ByVal value As System.Data.OleDb.OleDbConnection)
				Me._connection = value
				If (Me.Adapter.InsertCommand IsNot Nothing) Then
					Me.Adapter.InsertCommand.Connection = value
				End If
				If (Me.Adapter.DeleteCommand IsNot Nothing) Then
					Me.Adapter.DeleteCommand.Connection = value
				End If
				If (Me.Adapter.UpdateCommand IsNot Nothing) Then
					Me.Adapter.UpdateCommand.Connection = value
				End If
				Dim i As Integer = 0
				Do While (i < Me.CommandCollection.Length)
					If (Me.CommandCollection(i) IsNot Nothing) Then
						CType(Me.CommandCollection(i), Global.System.Data.OleDb.OleDbCommand).Connection = value
					End If
					i = (i + 1)
				Loop
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
			Get
				Return Me._transaction
			End Get
			Set(ByVal value As System.Data.OleDb.OleDbTransaction)
				Me._transaction = value
				Dim i As Integer = 0
				Do While (i < Me.CommandCollection.Length)
					Me.CommandCollection(i).Transaction = Me._transaction
					i = (i + 1)
				Loop
				If ((Me.Adapter IsNot Nothing) AndAlso (Me.Adapter.DeleteCommand IsNot Nothing)) Then
					Me.Adapter.DeleteCommand.Transaction = Me._transaction
				End If
				If ((Me.Adapter IsNot Nothing) AndAlso (Me.Adapter.InsertCommand IsNot Nothing)) Then
					Me.Adapter.InsertCommand.Transaction = Me._transaction
				End If
				If ((Me.Adapter IsNot Nothing) AndAlso (Me.Adapter.UpdateCommand IsNot Nothing)) Then
					Me.Adapter.UpdateCommand.Transaction = Me._transaction
				End If
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
			Get
				If (Me._commandCollection Is Nothing) Then
					Me.InitCommandCollection()
				End If
				Return Me._commandCollection
			End Get
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Public Property ClearBeforeFill() As Boolean
			Get
				Return Me._clearBeforeFill
			End Get
			Set(ByVal value As Boolean)
				Me._clearBeforeFill = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Sub InitAdapter()
			Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
			Dim tableMapping As New Global.System.Data.Common.DataTableMapping()
			tableMapping.SourceTable = "Table"
			tableMapping.DataSetTable = "Countries"
			tableMapping.ColumnMappings.Add("Id", "Id")
			tableMapping.ColumnMappings.Add("Country", "Country")
			tableMapping.ColumnMappings.Add("OfficialName", "OfficialName")
			tableMapping.ColumnMappings.Add("Currency", "Currency")
			tableMapping.ColumnMappings.Add("Capital", "Capital")
			tableMapping.ColumnMappings.Add("BFlag", "BFlag")
			tableMapping.ColumnMappings.Add("Area", "Area")
			tableMapping.ColumnMappings.Add("GDP", "GDP")
			tableMapping.ColumnMappings.Add("Population", "Population")
			tableMapping.ColumnMappings.Add("Languages", "Languages")
			tableMapping.ColumnMappings.Add("Religions", "Religions")
			Me._adapter.TableMappings.Add(tableMapping)
			Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.DeleteCommand.Connection = Me.Connection
			Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Countries` WHERE ((`Id` = ?) AND ((? = 1 AND `Country` IS NULL) OR (`Country` = ?)) AND ((? = 1 AND `OfficialName` IS NULL) OR (`OfficialName` = ?)) AND ((? = 1 AND `Currency` IS NULL) OR (`Currency` = ?)) AND ((? = 1 AND `Capital` IS NULL) OR (`Capital` = ?)) AND ((? = 1 AND `Area` IS NULL) OR (`Area` = ?)) AND ((? = 1 AND `GDP` IS NULL) OR (`GDP` = ?)) AND ((? = 1 AND `Population` IS NULL) OR (`Population` = ?)) AND ((? = 1 AND `Languages` IS NULL) OR (`Languages` = ?)) AND ((? = 1 AND `Religions` IS NULL) OR (`Religions` = ?)))"
			Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Id", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Id", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Country", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Country", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Country", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Country", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_OfficialName", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "OfficialName", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_OfficialName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "OfficialName", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Currency", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Currency", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Currency", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Currency", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Capital", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Capital", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Capital", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Capital", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Area", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Area", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Area", Global.System.Data.OleDb.OleDbType.Single, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Area", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_GDP", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "GDP", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_GDP", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "GDP", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Population", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Population", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Population", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Population", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Languages", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Languages", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Languages", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Languages", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Religions", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Religions", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Religions", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Religions", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.InsertCommand.Connection = Me.Connection
			Me._adapter.InsertCommand.CommandText = "INSERT INTO `Countries` (`Id`, `Country`, `OfficialName`, `Currency`, `Capital`, " & "`BFlag`, `Area`, `GDP`, `Population`, `Languages`, `Religions`) VALUES (?, ?, ?," & " ?, ?, ?, ?, ?, ?, ?, ?)"
			Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Id", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Id", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Country", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Country", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("OfficialName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "OfficialName", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Currency", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Currency", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Capital", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Capital", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BFlag", Global.System.Data.OleDb.OleDbType.LongVarBinary, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "BFlag", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Area", Global.System.Data.OleDb.OleDbType.Single, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Area", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("GDP", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "GDP", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Population", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Population", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Languages", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Languages", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Religions", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Religions", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
			Me._adapter.UpdateCommand.Connection = Me.Connection
			Me._adapter.UpdateCommand.CommandText = "UPDATE `Countries` SET `Id` = ?, `Country` = ?, `OfficialName` = ?, `Currency` = ?, `Capital` = ?, `BFlag` = ?, `Area` = ?, `GDP` = ?, `Population` = ?, `Languages` = ?, `Religions` = ? WHERE ((`Id` = ?) AND ((? = 1 AND `Country` IS NULL) OR (`Country` = ?)) AND ((? = 1 AND `OfficialName` IS NULL) OR (`OfficialName` = ?)) AND ((? = 1 AND `Currency` IS NULL) OR (`Currency` = ?)) AND ((? = 1 AND `Capital` IS NULL) OR (`Capital` = ?)) AND ((? = 1 AND `Area` IS NULL) OR (`Area` = ?)) AND ((? = 1 AND `GDP` IS NULL) OR (`GDP` = ?)) AND ((? = 1 AND `Population` IS NULL) OR (`Population` = ?)) AND ((? = 1 AND `Languages` IS NULL) OR (`Languages` = ?)) AND ((? = 1 AND `Religions` IS NULL) OR (`Religions` = ?)))"
			Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Id", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Id", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Country", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Country", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("OfficialName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "OfficialName", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Currency", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Currency", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Capital", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Capital", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BFlag", Global.System.Data.OleDb.OleDbType.LongVarBinary, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "BFlag", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Area", Global.System.Data.OleDb.OleDbType.Single, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Area", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("GDP", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "GDP", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Population", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Population", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Languages", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Languages", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Religions", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Religions", Global.System.Data.DataRowVersion.Current, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Id", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Id", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Country", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Country", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Country", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Country", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_OfficialName", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "OfficialName", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_OfficialName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "OfficialName", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Currency", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Currency", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Currency", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Currency", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Capital", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Capital", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Capital", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Capital", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Area", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Area", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Area", Global.System.Data.OleDb.OleDbType.Single, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Area", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_GDP", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "GDP", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_GDP", Global.System.Data.OleDb.OleDbType.Currency, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "GDP", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Population", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Population", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Population", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Population", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Languages", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Languages", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Languages", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Languages", Global.System.Data.DataRowVersion.Original, False, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Religions", Global.System.Data.OleDb.OleDbType.Integer, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Religions", Global.System.Data.DataRowVersion.Original, True, Nothing))
			Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Religions", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, (CByte(0)), (CByte(0)), "Religions", Global.System.Data.DataRowVersion.Original, False, Nothing))
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Sub InitConnection()
			Me._connection = New Global.System.Data.OleDb.OleDbConnection()
			Me._connection.ConnectionString = My.Settings.Default.countriesDBConnectionString
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Sub InitCommandCollection()
			Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0){}
			Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
			Me._commandCollection(0).Connection = Me.Connection
			Me._commandCollection(0).CommandText = "SELECT Id, Country, OfficialName, [Currency], Capital, BFlag, Area, GDP, Populati" & "on, Languages, Religions FROM Countries"
			Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
		Public Overridable Function Fill(ByVal dataTable As countriesDBDataSet.CountriesDataTable) As Integer
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			If (Me.ClearBeforeFill = True) Then
				dataTable.Clear()
			End If
			Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
			Return returnValue
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, True)> _
		Public Overridable Function GetData() As countriesDBDataSet.CountriesDataTable
			Me.Adapter.SelectCommand = Me.CommandCollection(0)
			Dim dataTable As New countriesDBDataSet.CountriesDataTable()
			Me.Adapter.Fill(dataTable)
			Return dataTable
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataTable As countriesDBDataSet.CountriesDataTable) As Integer
			Return Me.Adapter.Update(dataTable)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataSet As countriesDBDataSet) As Integer
			Return Me.Adapter.Update(dataSet, "Countries")
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
			Return Me.Adapter.Update(New Global.System.Data.DataRow() { dataRow})
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
		Public Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
			Return Me.Adapter.Update(dataRows)
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
		Public Overridable Function Delete(ByVal Original_Id? As Integer, ByVal Original_Country As String, ByVal Original_OfficialName As String, ByVal Original_Currency As String, ByVal Original_Capital As String, ByVal Original_Area? As Single, ByVal Original_GDP? As Decimal, ByVal Original_Population? As Integer, ByVal Original_Languages As String, ByVal Original_Religions As String) As Integer
			If (Original_Id.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(0).Value = (CInt(Fix(Original_Id.Value)))
			Else
				Me.Adapter.DeleteCommand.Parameters(0).Value = Global.System.DBNull.Value
			End If
			If (Original_Country Is Nothing) Then
				Throw New Global.System.ArgumentNullException("Original_Country")
			Else
				Me.Adapter.DeleteCommand.Parameters(1).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(2).Value = (CStr(Original_Country))
			End If
			If (Original_OfficialName Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(3).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(3).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(4).Value = (CStr(Original_OfficialName))
			End If
			If (Original_Currency Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(5).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(5).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(6).Value = (CStr(Original_Currency))
			End If
			If (Original_Capital Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(7).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(7).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(8).Value = (CStr(Original_Capital))
			End If
			If (Original_Area.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(9).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(10).Value = (CSng(Original_Area.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(9).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
			End If
			If (Original_GDP.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(11).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(12).Value = (CDec(Original_GDP.Value))
			Else
				Me.Adapter.DeleteCommand.Parameters(11).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
			End If
			If (Original_Population.HasValue = True) Then
				Me.Adapter.DeleteCommand.Parameters(13).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(14).Value = (CInt(Fix(Original_Population.Value)))
			Else
				Me.Adapter.DeleteCommand.Parameters(13).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
			End If
			If (Original_Languages Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(15).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(15).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(16).Value = (CStr(Original_Languages))
			End If
			If (Original_Religions Is Nothing) Then
				Me.Adapter.DeleteCommand.Parameters(17).Value = (CObj(1))
				Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.DeleteCommand.Parameters(17).Value = (CObj(0))
				Me.Adapter.DeleteCommand.Parameters(18).Value = (CStr(Original_Religions))
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
			If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.DeleteCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.DeleteCommand.Connection.Close()
				End If
			End Try
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
		Public Overridable Function Insert(ByVal Id? As Integer, ByVal Country As String, ByVal OfficialName As String, ByVal Currency As String, ByVal Capital As String, ByVal BFlag() As Byte, ByVal Area? As Single, ByVal GDP? As Decimal, ByVal Population? As Integer, ByVal Languages As String, ByVal Religions As String) As Integer
			If (Id.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(0).Value = (CInt(Fix(Id.Value)))
			Else
				Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
			End If
			If (Country Is Nothing) Then
				Throw New Global.System.ArgumentNullException("Country")
			Else
				Me.Adapter.InsertCommand.Parameters(1).Value = (CStr(Country))
			End If
			If (OfficialName Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(2).Value = (CStr(OfficialName))
			End If
			If (Currency Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(3).Value = (CStr(Currency))
			End If
			If (Capital Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(4).Value = (CStr(Capital))
			End If
			If (BFlag Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(5).Value = (CType(BFlag, Byte()))
			End If
			If (Area.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(6).Value = (CSng(Area.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
			End If
			If (GDP.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(7).Value = (CDec(GDP.Value))
			Else
				Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
			End If
			If (Population.HasValue = True) Then
				Me.Adapter.InsertCommand.Parameters(8).Value = (CInt(Fix(Population.Value)))
			Else
				Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
			End If
			If (Languages Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(9).Value = (CStr(Languages))
			End If
			If (Religions Is Nothing) Then
				Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.InsertCommand.Parameters(10).Value = (CStr(Religions))
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
			If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.InsertCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.InsertCommand.Connection.Close()
				End If
			End Try
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
		Public Overridable Function Update(ByVal Id? As Integer, ByVal Country As String, ByVal OfficialName As String, ByVal Currency As String, ByVal Capital As String, ByVal BFlag() As Byte, ByVal Area? As Single, ByVal GDP? As Decimal, ByVal Population? As Integer, ByVal Languages As String, ByVal Religions As String, ByVal Original_Id? As Integer, ByVal Original_Country As String, ByVal Original_OfficialName As String, ByVal Original_Currency As String, ByVal Original_Capital As String, ByVal Original_Area? As Single, ByVal Original_GDP? As Decimal, ByVal Original_Population? As Integer, ByVal Original_Languages As String, ByVal Original_Religions As String) As Integer
			If (Id.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(0).Value = (CInt(Fix(Id.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
			End If
			If (Country Is Nothing) Then
				Throw New Global.System.ArgumentNullException("Country")
			Else
				Me.Adapter.UpdateCommand.Parameters(1).Value = (CStr(Country))
			End If
			If (OfficialName Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(2).Value = (CStr(OfficialName))
			End If
			If (Currency Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(3).Value = (CStr(Currency))
			End If
			If (Capital Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(4).Value = (CStr(Capital))
			End If
			If (BFlag Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(5).Value = (CType(BFlag, Byte()))
			End If
			If (Area.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(6).Value = (CSng(Area.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
			End If
			If (GDP.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(7).Value = (CDec(GDP.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
			End If
			If (Population.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(8).Value = (CInt(Fix(Population.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
			End If
			If (Languages Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(9).Value = (CStr(Languages))
			End If
			If (Religions Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(10).Value = (CStr(Religions))
			End If
			If (Original_Id.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(11).Value = (CInt(Fix(Original_Id.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
			End If
			If (Original_Country Is Nothing) Then
				Throw New Global.System.ArgumentNullException("Original_Country")
			Else
				Me.Adapter.UpdateCommand.Parameters(12).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(13).Value = (CStr(Original_Country))
			End If
			If (Original_OfficialName Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(14).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(14).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(15).Value = (CStr(Original_OfficialName))
			End If
			If (Original_Currency Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(16).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(16).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(17).Value = (CStr(Original_Currency))
			End If
			If (Original_Capital Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(18).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(18).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(19).Value = (CStr(Original_Capital))
			End If
			If (Original_Area.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(20).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(21).Value = (CSng(Original_Area.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(20).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
			End If
			If (Original_GDP.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(22).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(23).Value = (CDec(Original_GDP.Value))
			Else
				Me.Adapter.UpdateCommand.Parameters(22).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
			End If
			If (Original_Population.HasValue = True) Then
				Me.Adapter.UpdateCommand.Parameters(24).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(25).Value = (CInt(Fix(Original_Population.Value)))
			Else
				Me.Adapter.UpdateCommand.Parameters(24).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
			End If
			If (Original_Languages Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(26).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(26).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(27).Value = (CStr(Original_Languages))
			End If
			If (Original_Religions Is Nothing) Then
				Me.Adapter.UpdateCommand.Parameters(28).Value = (CObj(1))
				Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
			Else
				Me.Adapter.UpdateCommand.Parameters(28).Value = (CObj(0))
				Me.Adapter.UpdateCommand.Parameters(29).Value = (CStr(Original_Religions))
			End If
			Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
			If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) <> Global.System.Data.ConnectionState.Open) Then
				Me.Adapter.UpdateCommand.Connection.Open()
			End If
			Try
				Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery()
				Return returnValue
			Finally
				If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
					Me.Adapter.UpdateCommand.Connection.Close()
				End If
			End Try
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
		Public Overridable Function Update(ByVal Country As String, ByVal OfficialName As String, ByVal Currency As String, ByVal Capital As String, ByVal BFlag() As Byte, ByVal Area? As Single, ByVal GDP? As Decimal, ByVal Population? As Integer, ByVal Languages As String, ByVal Religions As String, ByVal Original_Id? As Integer, ByVal Original_Country As String, ByVal Original_OfficialName As String, ByVal Original_Currency As String, ByVal Original_Capital As String, ByVal Original_Area? As Single, ByVal Original_GDP? As Decimal, ByVal Original_Population? As Integer, ByVal Original_Languages As String, ByVal Original_Religions As String) As Integer
			Return Me.Update(Original_Id, Country, OfficialName, Currency, Capital, BFlag, Area, GDP, Population, Languages, Religions, Original_Id, Original_Country, Original_OfficialName, Original_Currency, Original_Capital, Original_Area, Original_GDP, Original_Population, Original_Languages, Original_Religions)
		End Function
	End Class

	''' <summary>
	'''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
	'''</summary>
	<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), Global.System.ComponentModel.DesignerCategoryAttribute("code"), Global.System.ComponentModel.ToolboxItem(True), Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" & "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")> _
	Partial Public Class TableAdapterManager
		Inherits System.ComponentModel.Component

		Private _updateOrder As UpdateOrderOption

		Private _countriesTableAdapter As CountriesTableAdapter

		Private _backupDataSetBeforeUpdate As Boolean

		Private _connection As Global.System.Data.IDbConnection

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Public Property UpdateOrder() As UpdateOrderOption
			Get
				Return Me._updateOrder
			End Get
			Set(ByVal value As UpdateOrderOption)
				Me._updateOrder = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" & "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" & "", "System.Drawing.Design.UITypeEditor")> _
		Public Property CountriesTableAdapter() As CountriesTableAdapter
			Get
				Return Me._countriesTableAdapter
			End Get
			Set(ByVal value As CountriesTableAdapter)
				Me._countriesTableAdapter = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Public Property BackupDataSetBeforeUpdate() As Boolean
			Get
				Return Me._backupDataSetBeforeUpdate
			End Get
			Set(ByVal value As Boolean)
				Me._backupDataSetBeforeUpdate = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False)> _
		Public Property Connection() As Global.System.Data.IDbConnection
			Get
				If (Me._connection IsNot Nothing) Then
					Return Me._connection
				End If
				If ((Me._countriesTableAdapter IsNot Nothing) AndAlso (Me._countriesTableAdapter.Connection IsNot Nothing)) Then
					Return Me._countriesTableAdapter.Connection
				End If
				Return Nothing
			End Get
			Set(ByVal value As System.Data.IDbConnection)
				Me._connection = value
			End Set
		End Property

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.Browsable(False)> _
		Public ReadOnly Property TableAdapterInstanceCount() As Integer
			Get
				Dim count As Integer = 0
				If (Me._countriesTableAdapter IsNot Nothing) Then
					count = (count + 1)
				End If
				Return count
			End Get
		End Property

		''' <summary>
		'''Update rows in top-down order.
		'''</summary>
		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Function UpdateUpdatedRows(ByVal dataSet As countriesDBDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
			Dim result As Integer = 0
			If (Me._countriesTableAdapter IsNot Nothing) Then
				Dim updatedRows() As Global.System.Data.DataRow = dataSet.Countries.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
				updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
				If ((updatedRows IsNot Nothing) AndAlso (0 < updatedRows.Length)) Then
					result = (result + Me._countriesTableAdapter.Update(updatedRows))
					allChangedRows.AddRange(updatedRows)
				End If
			End If
			Return result
		End Function

		''' <summary>
		'''Insert rows in top-down order.
		'''</summary>
		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Function UpdateInsertedRows(ByVal dataSet As countriesDBDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
			Dim result As Integer = 0
			If (Me._countriesTableAdapter IsNot Nothing) Then
				Dim addedRows() As Global.System.Data.DataRow = dataSet.Countries.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
				If ((addedRows IsNot Nothing) AndAlso (0 < addedRows.Length)) Then
					result = (result + Me._countriesTableAdapter.Update(addedRows))
					allAddedRows.AddRange(addedRows)
				End If
			End If
			Return result
		End Function

		''' <summary>
		'''Delete rows in bottom-up order.
		'''</summary>
		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Function UpdateDeletedRows(ByVal dataSet As countriesDBDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
			Dim result As Integer = 0
			If (Me._countriesTableAdapter IsNot Nothing) Then
				Dim deletedRows() As Global.System.Data.DataRow = dataSet.Countries.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
				If ((deletedRows IsNot Nothing) AndAlso (0 < deletedRows.Length)) Then
					result = (result + Me._countriesTableAdapter.Update(deletedRows))
					allChangedRows.AddRange(deletedRows)
				End If
			End If
			Return result
		End Function

		''' <summary>
		'''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
		'''</summary>
		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
			If ((updatedRows Is Nothing) OrElse (updatedRows.Length < 1)) Then
				Return updatedRows
			End If
			If ((allAddedRows Is Nothing) OrElse (allAddedRows.Count < 1)) Then
				Return updatedRows
			End If
			Dim realUpdatedRows As New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
			Dim i As Integer = 0
			Do While (i < updatedRows.Length)
				Dim row As Global.System.Data.DataRow = updatedRows(i)
				If (allAddedRows.Contains(row) = False) Then
					realUpdatedRows.Add(row)
				End If
				i = (i + 1)
			Loop
			Return realUpdatedRows.ToArray()
		End Function

		''' <summary>
		'''Update all changes to the dataset.
		'''</summary>
		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Public Overridable Function UpdateAll(ByVal dataSet As countriesDBDataSet) As Integer
			If (dataSet Is Nothing) Then
				Throw New Global.System.ArgumentNullException("dataSet")
			End If
			If (dataSet.HasChanges() = False) Then
				Return 0
			End If
			If ((Me._countriesTableAdapter IsNot Nothing) AndAlso (Me.MatchTableAdapterConnection(Me._countriesTableAdapter.Connection) = False)) Then
				Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" & "tring.")
			End If
			Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
			If (workConnection Is Nothing) Then
				Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" & "ger TableAdapter property to a valid TableAdapter instance.")
			End If
			Dim workConnOpened As Boolean = False
			If ((workConnection.State And Global.System.Data.ConnectionState.Broken) = Global.System.Data.ConnectionState.Broken) Then
				workConnection.Close()
			End If
			If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
				workConnection.Open()
				workConnOpened = True
			End If
			Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction()
			If (workTransaction Is Nothing) Then
				Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" & "ctions or the current state is not allowing the transaction to begin.")
			End If
			Dim allChangedRows As New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
			Dim allAddedRows As New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
			Dim adaptersWithAcceptChangesDuringUpdate As New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
			Dim revertConnections As New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
			Dim result As Integer = 0
			Dim backupDataSet As Global.System.Data.DataSet = Nothing
			If Me.BackupDataSetBeforeUpdate Then
				backupDataSet = New Global.System.Data.DataSet()
				backupDataSet.Merge(dataSet)
			End If
			Try
				' ---- Prepare for update -----------
				'
				If (Me._countriesTableAdapter IsNot Nothing) Then
					revertConnections.Add(Me._countriesTableAdapter, Me._countriesTableAdapter.Connection)
					Me._countriesTableAdapter.Connection = (CType(workConnection, Global.System.Data.OleDb.OleDbConnection))
					Me._countriesTableAdapter.Transaction = (CType(workTransaction, Global.System.Data.OleDb.OleDbTransaction))
					If Me._countriesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
						Me._countriesTableAdapter.Adapter.AcceptChangesDuringUpdate = False
						adaptersWithAcceptChangesDuringUpdate.Add(Me._countriesTableAdapter.Adapter)
					End If
				End If
				' 
				'---- Perform updates -----------
				'
				If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
					result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
					result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
				Else
					result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
					result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
				End If
				result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
				' 
				'---- Commit updates -----------
				'
				workTransaction.Commit()
				If (0 < allAddedRows.Count) Then
					Dim rows(allAddedRows.Count - 1) As Global.System.Data.DataRow
					allAddedRows.CopyTo(rows)
					Dim i As Integer = 0
					Do While (i < rows.Length)
						Dim row As Global.System.Data.DataRow = rows(i)
						row.AcceptChanges()
						i = (i + 1)
					Loop
				End If
				If (0 < allChangedRows.Count) Then
					Dim rows(allChangedRows.Count - 1) As Global.System.Data.DataRow
					allChangedRows.CopyTo(rows)
					Dim i As Integer = 0
					Do While (i < rows.Length)
						Dim row As Global.System.Data.DataRow = rows(i)
						row.AcceptChanges()
						i = (i + 1)
					Loop
				End If
			Catch ex As Global.System.Exception
				workTransaction.Rollback()
				' ---- Restore the dataset -----------
				If Me.BackupDataSetBeforeUpdate Then
					Global.System.Diagnostics.Debug.Assert((backupDataSet IsNot Nothing))
					dataSet.Clear()
					dataSet.Merge(backupDataSet)
				Else
					If (0 < allAddedRows.Count) Then
						Dim rows(allAddedRows.Count - 1) As Global.System.Data.DataRow
						allAddedRows.CopyTo(rows)
						Dim i As Integer = 0
						Do While (i < rows.Length)
							Dim row As Global.System.Data.DataRow = rows(i)
							row.AcceptChanges()
							row.SetAdded()
							i = (i + 1)
						Loop
					End If
				End If
				Throw ex
			Finally
				If workConnOpened Then
					workConnection.Close()
				End If
				If (Me._countriesTableAdapter IsNot Nothing) Then
					Me._countriesTableAdapter.Connection = (CType(revertConnections(Me._countriesTableAdapter), Global.System.Data.OleDb.OleDbConnection))
					Me._countriesTableAdapter.Transaction = Nothing
				End If
				If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
					Dim adapters(adaptersWithAcceptChangesDuringUpdate.Count - 1) As Global.System.Data.Common.DataAdapter
					adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
					Dim i As Integer = 0
					Do While (i < adapters.Length)
						Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
						adapter.AcceptChangesDuringUpdate = True
						i = (i + 1)
					Loop
				End If
			End Try
			Return result
		End Function

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
			Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
		End Sub

		<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
		Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
			If (Me._connection IsNot Nothing) Then
				Return True
			End If
			If ((Me.Connection Is Nothing) OrElse (inputConnection Is Nothing)) Then
				Return True
			End If
			If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
				Return True
			End If
			Return False
		End Function

		''' <summary>
		'''Update Order Option
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
		Public Enum UpdateOrderOption

			InsertUpdateDelete = 0

			UpdateInsertDelete = 1
		End Enum

		''' <summary>
		'''Used to sort self-referenced table's rows
		'''</summary>
		<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
		Private Class SelfReferenceComparer
			Inherits Object
			Implements System.Collections.Generic.IComparer(Of System.Data.DataRow)

			Private _relation As Global.System.Data.DataRelation

			Private _childFirst As Integer

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
				Me._relation = relation
				If childFirst Then
					Me._childFirst = -1
				Else
					Me._childFirst = 1
				End If
			End Sub

			<Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
			Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
				Global.System.Diagnostics.Debug.Assert((child IsNot Nothing))
				Global.System.Diagnostics.Debug.Assert((parent IsNot Nothing))
				Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Default)
				Do While ((newParent IsNot Nothing) AndAlso ((Object.ReferenceEquals(newParent, child) = False) AndAlso (Object.ReferenceEquals(newParent, parent) = False)))
					newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Default)
				Loop
				If (newParent Is Nothing) Then
					newParent = child.GetParentRow(Me._relation, System.Data.DataRowVersion.Original)
					Do While ((newParent IsNot Nothing) AndAlso ((Object.ReferenceEquals(newParent, child) = False) AndAlso (Object.ReferenceEquals(newParent, parent) = False)))
						newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
					Loop
				End If
				If Object.ReferenceEquals(newParent, parent) Then
					Return True
				End If
				Return False
			End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements System.Collections.Generic.IComparer(Of System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                ' Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                ' Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
		End Class
	End Class
End Namespace

'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning restore 1591